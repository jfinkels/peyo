/**
 * ProteinFitnessFunctionTest.java
 * 
 * Copyright 2010 Jeffrey Finkelstein
 * 
 * This file is part of peyo.
 * 
 * peyo is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * peyo is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * peyo. If not, see <http://www.gnu.org/licenses/>.
 */
package peyo;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.util.List;

import jmona.FitnessException;
import jmona.InitializationException;
import jmona.impl.ListFactory;

import org.biojava.bio.program.hmmer.HmmerProfileParser;
import org.biojava.bio.seq.ProteinTools;
import org.junit.Test;

import peyo.test.TestUtils;

/**
 * Test class for the {@link ProteinFitnessFunction} class.
 * 
 * @author Jeffrey Finkelstein
 * @since 0.1
 */
public class ProteinFitnessFunctionTest {

  /** The file containing an example hidden Markov model generated by HMMER. */
  public static final File HMM_FILE = new File(
      "src/test/resources/peyo/example.hmm");

  /**
   * The sequence taken from PDB chain 2a8e, on which the example hidden Markov
   * model is based.
   */
  public static final String RESIDUE_STRING = "MTQMRFTEEDFNTFTIEGLDARMEVLKETVR"
      + "PKLTALGEHFAPTLSALTGDEMFPHVAKHARRSVNPPADSWVAFANSKRGYKKLPHFQIGLWESHVFVW"
      + "FAIIYESPIKEEYGKLLEVNQETITKNIPDSFVWSADHTKPGVHKQSEMDKEQLKTLFERLQTVKKAEL"
      + "LCGIQLQKEEVLNMNNQEFLQRIDDAFKQLAFLYRLTQKVTALEHHHHHH";

  /**
   * The List of Residues representing PDB chain 2a8e, on which the example
   * hidden Markov model is based.
   */
  public static final List<Residue> SEQUENCE = Sequence
      .fromOneLetterString(RESIDUE_STRING);

  /**
   * Test method for
   * {@link peyo.ProteinFitnessFunction#ProteinFitnessFunction(double)}.
   */
  @Test
  public void testProteinFitnessFunction() {
    final ProteinFitnessFunction function = new ProteinFitnessFunction(
        Double.MAX_VALUE);
    assertEquals(Double.MAX_VALUE, function.extremum(), 0);
  }

  /**
   * Test method for
   * {@link peyo.ProteinFitnessFunction#setHiddenMarkovModel(org.biojava.bio.dp.MarkovModel)}
   * .
   */
  @Test
  public void testSetHiddenMarkovModel() {
    final ProteinFitnessFunction function = new ProteinFitnessFunction(
        Double.MAX_VALUE);
  }

  /**
   * Test method for
   * {@link peyo.ProteinFitnessFunction#rawFitness(java.util.List)}.
   */
  @Test
  public void testRawFitness() {
    final ProteinFitnessFunction function = new ProteinFitnessFunction(
        Double.MAX_VALUE);

    try {
      function.setHiddenMarkovModel(HmmerProfileParser.parse(HMM_FILE));
    } catch (final DPCreationException exception) {
      TestUtils.fail(exception);
    }

    double fitness = 0.0;
    try {
      fitness = function.rawFitness(SEQUENCE);
    } catch (final FitnessException exception) {
      TestUtils.fail(exception);
    }

    assertEquals(615.903005347016, fitness, 0.0);
  }

}
